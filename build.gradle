import java.util.regex.Matcher

plugins {
    id 'java'
    id 'application'
    id "org.beryx.jlink" version "2.16.2"
    id 'jacoco'
    id "org.sonarqube" version "3.5.0.2730" 
}

group 'razesoldier'
version '1.0-SNAPSHOT'

sourceCompatibility = 14
targetCompatibility = 14

repositories {
    mavenCentral()
}

dependencies {
    implementation("com.mayabot.mynlp:mynlp-transform:3.0.2")
    implementation("org.jsoup:jsoup:1.12.1")
    implementation("org.jetbrains:annotations:17.0.0")
    testImplementation("org.slf4j:slf4j-nop:1.7.28")
    testImplementation("org.junit.jupiter:junit-jupiter:5.5.2")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.5.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.5.2")
}

ext.moduleName = 'razesoldier.epub'
mainClassName = "$moduleName/razesoldier.epub.cli.CliEntry"

// Настройка JaCoCo
jacoco {
    toolVersion = "0.8.10" // Актуальная версия
}

// Генерация отчета
jacocoTestReport {
    reports {
        xml.required = true // Для SonarQube
        html.required = true // Для локального просмотра
    }
    dependsOn test // Запускать после тестов
}

task copyTestResource(type: Copy) {
    from "$buildDir/resources/test"
    into "$buildDir/classes/java/test"
    mustRunAfter processTestResources
}

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
            '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

test {
    dependsOn copyTestResource
    useJUnitPlatform()
    finalizedBy jacocoTestReport // Связываем с генерацией отчета
}

startScripts {
    inputs.property("moduleName", moduleName)
    doFirst {
        classpath = files()
        defaultJvmOpts = [
            '-Dfile.encoding=UTF-8',
            '--module-path', 'APP_HOME_LIBS',
            '--module', mainClassName
        ]
    }
    doLast{
        def bashFile = new File(outputDir, applicationName)
        String bashContent = bashFile.text
        bashFile.text = bashContent.replaceFirst('APP_HOME_LIBS', Matcher.quoteReplacement('$APP_HOME/lib'))

        def batFile = new File(outputDir, applicationName + ".bat")
        String batContent = batFile.text
        batFile.text = batContent.replaceFirst('APP_HOME_LIBS', Matcher.quoteReplacement('%APP_HOME%\\lib'))
    }
}

afterEvaluate {
    jar {
        inputs.property("moduleName", moduleName)
        manifest {
            attributes('Automatic-Module-Name': moduleName)
            attributes 'Implementation-Title': "EPubHant2Hans",
                    'Main-Class': 'razesoldier.epub.cli.CliEntry'
        }
   
